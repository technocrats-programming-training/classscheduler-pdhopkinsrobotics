/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package classscheduler;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.NoSuchElementException;

import static org.mockito.Mockito.*;

public class AppTest {
    InputStream sysInBackup;
    PrintStream sysOutBackup;

    @Before
    public void backupSystem() {
        sysInBackup = System.in;
        sysOutBackup = System.out;
    }

    public void replaceSystemIn(String simInput) {
        ByteArrayInputStream in = new ByteArrayInputStream(simInput.getBytes());
        System.setIn(in);
    }

    public ByteArrayOutputStream replaceSystemOut() {
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outContent));
        return outContent;
    }

    @Test
    public void testPrintsDatabase() {
        replaceSystemIn(CommonFixtures.classDatabase+"viewAvailable\r\n");
        ByteArrayOutputStream outContent = replaceSystemOut();
        try {
            App.main(null);
        } catch (NoSuchElementException e) {
            
        }
        assertTrue(outContent.toString().contains("ID: 0, Block: 1, Name: AP Lang, Teacher: Homberger"));
        assertTrue(outContent.toString().contains("ID: 1, Block: 2, Name: AP Physics, Teacher: Ditty"));
        assertTrue(outContent.toString().contains("ID: 2, Block: 3, Name: AP Chemistry, Teacher: Kappel"));
        assertTrue(outContent.toString().contains("ID: 3, Block: 4, Name: HPAL, Teacher: Brueske"));
        assertTrue(outContent.toString().contains("ID: 4, Block: 2, Name: AP Calculus, Teacher: Hering"));
    }

    @Test 
    public void testAddsOneBlock() {
        replaceSystemIn(CommonFixtures.classDatabase+"add\r\n0\r\nviewSchedule\r\n");
        ByteArrayOutputStream outContent = replaceSystemOut();
        try {
            App.main(null);
        } catch (NoSuchElementException e) {
            
        }
        assertTrue(outContent.toString().contains("Block 1: AP Lang"));
        assertTrue(outContent.toString().contains("Block 2: empty"));
        assertTrue(outContent.toString().contains("Block 3: empty"));
        assertTrue(outContent.toString().contains("Block 4: empty"));
    }

    @Test
    public void testAddsTwoBlocks() {
        replaceSystemIn(CommonFixtures.classDatabase+"add\r\n0\r\nadd\r\n1\r\nviewSchedule\r\n");
        ByteArrayOutputStream outContent = replaceSystemOut();
        try {
            App.main(null);
        } catch (NoSuchElementException e) {
            
        }
        assertTrue(outContent.toString().contains("Block 1: AP Lang"));
        assertTrue(outContent.toString().contains("Block 2: AP Physics"));
        assertTrue(outContent.toString().contains("Block 3: empty"));
        assertTrue(outContent.toString().contains("Block 4: empty"));
    }

    @Test
    public void testAddsConflictingBlocks() {
        replaceSystemIn(CommonFixtures.classDatabase+"add\r\n1\r\nadd\r\n4\r\nviewSchedule\r\n");
        ByteArrayOutputStream outContent = replaceSystemOut();
        try {
            App.main(null);
        } catch (NoSuchElementException e) {
            
        }
        assertTrue(outContent.toString().contains("Block 2 is already full"));
        assertTrue(outContent.toString().contains("Block 1: empty"));
        assertTrue(outContent.toString().contains("Block 2: AP Physics"));
        assertTrue(outContent.toString().contains("Block 3: empty"));
        assertTrue(outContent.toString().contains("Block 4: empty"));
    }

    @Test
    public void testDrop() {
        replaceSystemIn(CommonFixtures.classDatabase+"add\r\n0\r\nadd\r\n1\r\ndrop\r\n2\r\nviewSchedule\r\n");
        ByteArrayOutputStream outContent = replaceSystemOut();
        try {
            App.main(null);
        } catch (NoSuchElementException e) {
            
        }
        assertTrue(outContent.toString().contains("Enter block:"));
        assertTrue(outContent.toString().contains("Block 1: AP Lang"));
        assertTrue(outContent.toString().contains("Block 2: empty"));
        assertTrue(outContent.toString().contains("Block 3: empty"));
        assertTrue(outContent.toString().contains("Block 4: empty"));
    }

    @After
    public void restoreSystem() {
        System.setIn(sysInBackup);
        System.setOut(sysOutBackup);
    }
}
